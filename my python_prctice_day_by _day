practice questions for today:
1.What is type casting? Give an example.
2.Convert the following:
a. "123" to integer.

b. 25 to string.

c. "3.14" to float.

3.What error occurs if you try int("abc")? Why? correct it.
4.How do you create a multi-line string in Python?
5.How do you include a quote inside a string?
6. Convert price = "99.99" to a float.
7. Create a string: I'm learning "Python"
use escape charachers to print
8.what is raw string? what¬†is¬†its¬†use?

answers above quesations for me practice learning 

‚úÖ 1. What is type casting? Give an example.
Answer:
Type casting is the process of converting one data type to another manually in Python.

Example:

python
Copy
Edit
a = "123"
b = int(a)   # '123' (string) ‚Üí 123 (integer)
print(b + 10)  # Output: 133
‚úÖ 2. Convert the following:
a. "123" to integer:

python
Copy
Edit
x = int("123")  # Output: 123
b. 25 to string:

python
Copy
Edit
x = str(25)     # Output: "25"
c. "3.14" to float:

python
Copy
Edit
x = float("3.14")  # Output: 3.14
‚úÖ 3. What error occurs if you try int("abc")? Why? Correct it.
Answer:

python
Copy
Edit
int("abc")  # ‚ùå ValueError: invalid literal for int() with base 10: 'abc'
Why?
Because "abc" is not a number.

‚úÖ Correct usage:

python
Copy
Edit
# Valid number string:
x = int("123")  # Output: 123
‚úÖ 4. How do you create a multi-line string in Python?
Answer:
Use triple quotes (''' or """).

Example:

python
Copy
Edit
text = '''This is
a multi-line
string.'''
print(text)
‚úÖ 5. How do you include a quote inside a string?
Answer:
Use escape characters (\) or alternate quote styles.

Examples:

python
Copy
Edit
text = "She said, \"Hello!\""
# or
text = 'She said, "Hello!"'
print(text)
‚úÖ 6. Convert price = "99.99" to a float:
python
Copy
Edit
price = "99.99"
price_float = float(price)
print(price_float)  # Output: 99.99
‚úÖ 7. Create a string: I'm learning "Python" using escape characters:
python
Copy
Edit
text = "I'm learning \"Python\""
print(text)
‚úÖ 8. What is a raw string? What is its use?
Answer:
A raw string treats backslashes (\) as literal characters, not escape characters.

Use: It's helpful when working with file paths or regex patterns.

Example:

python
Copy
Edit
path = r"C:\Users\Ashok\Documents"
print(path)
# Output: C:\Users\Ashok\Documents
Without raw string:

python
Copy
Edit
path = "C:\\Users\\Ashok\\Documents"









second prcatice learning python day 2  probealms sloving in git hub?

practice questions:
1.Question: Write a Python program that takes a string as input and prints its length.
Example Input: "Hello World"
Expected Output: The length of the string is: 11

2.Question: Given the string data = "abcdefghijklmnop", write Python code to:
A. Get the first 5 characters.
B. Get the last 3 characters.
C. Get characters from index 2 to 7 (inclusive of 2, exclusive of 8).
D. Get every second character.
E. Reverse the string.

3.Question: If you have a string sentence = "This is a long sentence.", how would you extract the word "long" using slicing?

4.Question: Write a Python program that takes a string as input and prints each character of the string on a new line using a for loop.

5.Question: Modify the program in question 4 to also print the index of each character alongside the character.

6.Question: You have the variables product = "Laptop" and price = 60,000. Use an f-string to print the following sentence: "The Laptop costs 60,000."

7.Question: Given the variables name = "vikas" and score = 85, use an f-string to print: "vikas's score is 85."

8.Question: Using the .format() method, create the same output as in Question 6: "The Laptop costs 60,000."

9.Question: Write a Python program that takes a string as input and uses the enumerate() function to print each character along with its index.

10.Question: Write a Python program that takes a string as input and uses the range() function along with a for loop to print each character of the string in reverse order¬†of¬†their¬†index.




above answers lerning my practice?

text = input("Enter a string: ")
print("The length of the string is:", len(text))
# Example input: Hello World ‚Üí Output: 11
‚úÖ 2. String Slicing
python
Copy
Edit
data = "abcdefghijklmnop"

# A. First 5 characters
print("First 5:", data[:5])  # Output: abcde

# B. Last 3 characters
print("Last 3:", data[-3:])  # Output: nop

# C. Characters from index 2 to 7
print("Index 2 to 7:", data[2:8])  # Output: cdefgh

# D. Every second character
print("Every second:", data[::2])  # Output: acegikmo

# E. Reverse the string
print("Reversed:", data[::-1])  # Output: ponmlkjihgfedcba
‚úÖ 3. Extract "long" using slicing
python
Copy
Edit
sentence = "This is a long sentence."
word = sentence[10:14]
print("Extracted word:", word)  # Output: long
‚úÖ 4. Print each character on a new line
python
Copy
Edit
text = input("Enter a string: ")
for char in text:
    print(char)
‚úÖ 5. Print each character with index
python
Copy
Edit
text = input("Enter a string: ")
for index, char in enumerate(text):
    print(f"Index {index}: {char}")
‚úÖ 6. f-string with variables
python
Copy
Edit
product = "Laptop"
price = 60000
print(f"The {product} costs {price}.")  # Output: The Laptop costs 60000.
‚úÖ 7. f-string with name and score
python
Copy
Edit
name = "vikas"
score = 85
print(f"{name}'s score is {score}.")  # Output: vikas's score is 85.
‚úÖ 8. .format() method
python
Copy
Edit
product = "Laptop"
price = 60000
print("The {} costs {}.".format(product, price))  # Output: The Laptop costs 60000.
‚úÖ 9. enumerate() to print characters with index
python
Copy
Edit
text = input("Enter a string: ")
for index, char in enumerate(text):
    print(f"Index {index}: {char}")
‚úÖ 10. Print each character in reverse order of index
python
Copy
Edit
text = input("Enter a string: ")
for i in range(len(text) - 1, -1, -1):
    print(f"Index {i}:¬†{text[i]}")




day 3 probelams sloving in git hub 29-07- 2025


Practice questions for today:
1. Write a program that takes a year as input. Determine if the year is a leap year.
2. Write a program that takes an integer as input and checks if "The number is divisible by 3 only."
3. Write a program that takes two numbers as input and prints the smaller of the two.
4. Write a program that takes two numbers as input and prints the larger of the two.
5. Write a program that takes a single letter as input. Determine if it's a vowel (a, e, i, o, u - consider both uppercase and lowercase) or a consonant.
6. Write a program that takes a person's age as input and prints their age category: "Child" (0-12), "Teenager" (13-19), "Adult" (20-64), or "Senior" (65 and above).
7. Write a program that takes a password as input. If the length of the password is 8 or more characters, print "Strong password"; otherwise, print "Weak¬†password."



day 3 probelams sloving answers above quesations?

1. Leap Year Checker
year = int(input("Enter a year: "))
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print("Leap year")
else:
    print("Not a leap year")


 2. Divisible by 3 Only

num = int(input("Enter an integer: "))
if num % 3 == 0 and num % 2 != 0 and num % 5 != 0:
    print("The number is divisible by 3 only")
else:
    print("The number is not divisible by 3 only")


3. Print Smaller Number

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
print("Smaller number is:", a if a < b else b)



4. Print Larger Number

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
print("Larger number is:", a if a > b else b)


5. Vowel or Consonant

letter = input("Enter a single letter: ").lower()
if letter in 'aeiou':
    print("Vowel")
elif letter.isalpha():
    print("Consonant")
else:
    print("Invalid input")



6. Age Category

age = int(input("Enter your age: "))
if age < 0:
    print("Invalid age")
elif age <= 12:
    print("Child")
elif age <= 19:
    print("Teenager")
elif age <= 64:
    print("Adult")
else:
    print("Senior")


7. Password Strength Checker

password = input("Enter a password: ")
if len(password) >= 8:
    print("Strong password")
else:
    print("Weak password")



30 - 07 - 2025 python practice python



quesations for python=----1

practice questions for today:
1.What is a for loop in Python, and when would you typically use it?
2.Explain the syntax of a basic for loop in Python.
3.What is an iterable? Give a few examples of built-in iterables in Python that are commonly used with for loops.
4.How can you iterate through the characters of a string using a for loop?
5.What is the purpose of the range() function when used with a for loop? Give a simple example.
6.Can you have a for loop inside another for loop? If so, what is this called?
7.What is a while loop in Python, and when would you typically use it?
8.Explain the syntax of a basic while loop in Python. What is the condition?
9.What is an infinite loop? How can you accidentally create one with a while loop, and how can you prevent it?
10.How do the break and continue statements work within¬†a¬†while¬†loop?




answers that above quesatioms for me?


1. What is a for loop in Python, and when would you typically use it?
A for loop is used to iterate over a sequence (like a list, string, tuple, dictionary, or a range). You use it when you know in advance how many times you want to run a block of code.

‚úÖ Example:

python
Copy
Edit
for i in [1, 2, 3]:
    print(i)


2. Explain the syntax of a basic for loop in Python.
python
Copy
Edit
for variable in iterable:
    # block of code
for fruit in ["apple", "banana", "cherry"]:
    print(fruit)


3. What is an iterable? Give a few examples of built-in iterables in Python that are commonly used with for loops.
An iterable is any Python object capable of returning its members one at a time.
üìå Examples of built-in iterables:

Strings

Lists

Tuples

Dictionaries

Ranges

‚úÖ Example:

python
Copy
Edit
for char in "hello":  # string is iterable
    print(char)

4. How can you iterate through the characters of a string using a for loop?
‚úÖ Example:

python
Copy
Edit
text = "Python"
for char in text:
    print(char)



5. What is the purpose of the range() function when used with a for loop? Give a simple example.
The range() function generates a sequence of numbers. It‚Äôs commonly used to repeat actions a specific number of times in a for loop.

‚úÖ Example:

python
Copy
Edit
for i in range(5):  # 0 to 4
    print(i)


6. Can you have a for loop inside another for loop? If so, what is this called?
Yes, it‚Äôs called a nested loop.

‚úÖ Example:

python
Copy
Edit
for i in range(3):
    for j in range(2):
        print(f"i={i}, j={j}")

7. What is a while loop in Python, and when would you typically use it?
A while loop runs as long as a condition is True. Use it when the number of iterations is not known in advance.

‚úÖ Example:

python
Copy
Edit
count = 0
while count < 3:
    print(count)
    count += 1


8. Explain the syntax of a basic while loop in Python. What is the condition?
python
Copy
Edit
while condition:
    # block of code
The loop runs as long as the condition is True.

‚úÖ Example:

python
Copy
Edit
x = 5
while x > 0:
    print(x)
    x -= 1




9. What is an infinite loop? How can you accidentally create one with a while loop, and how can you prevent it?
An infinite loop runs forever unless stopped.
This can happen if the condition never becomes False.

‚ùå Example of accidental infinite loop:

python
Copy
Edit
x = 1
while x > 0:  # This will never end unless x decreases
    print(x)
‚úÖ Prevention: Always update the condition inside the loop:

python
Copy
Edit
x = 5
while x > 0:
    print(x)
    x -= 1



10. How do the break and continue statements work within a while loop?
break: exits the loop completely.

continue: skips the rest of the current iteration and goes to the next loop condition.

‚úÖ Example with break:

python
Copy
Edit
i = 1
while i <= 5:
    if i == 3:
        break
    print(i)
    i += 1
‚úÖ Example with continue:

python
Copy
Edit
i = 0
while i < 5:
    i += 1
    if i == 3:
        continue
    print(i)


31 - 7- 2025

Practice questions for today and tomorrow:

Question: Write a program that takes a sentence as input. Capitalize the first letter of the sentence and print the modified sentence.

Question: Write a program that takes a string as input. Convert the entire string to lowercase and print it.

Question: Write a program that takes a string as input. Convert the entire string to uppercase and print it.


Question: Write a program that takes a sentence as input. Convert the sentence to title case (where the first letter of each word is capitalized) and print it.

Question: Write a program that takes a string with leading spaces as input. Remove the leading spaces and print the stripped string.

Question: Write a program that takes a string with trailing spaces as input. Remove the trailing spaces and print the stripped string.

Question: Write a program that takes a string with leading and trailing spaces as input. Remove both leading and trailing spaces and print the stripped string.

Question: Write a program that takes a sentence and two words (old and new) as input. Replace all occurrences of the old word with the new word in the sentence and print the result.

Question: Write a program that takes a string and a character as input. Count the number of times the character appears in the string (case-insensitive) using a loop and conditional statements (or directly with count() after converting the string to a single case).

Question: Write a program that takes a string and a substring as input. Find the index of the first occurrence of the substring. If the substring is not found, print a message indicating that.

Question: Write a program that takes a string and a substring as input. Find all occurrences of the substring in the string using a while loop and the find() method. Print the starting index of each occurrence.

Question: Write a program that takes a comma-separated string of items as input. Split the string into a list of individual items and print each item.

Question: Write a program that takes a filename as input. Check if the filename ends with ".txt". If it does, print "This is a text file."; otherwise, print "This is not necessarily a text file."

Questions: Write a program that takes a line of text as input. Check if the line starts with "Subject: ". If it does, print "This line is likely an email subject."; otherwise, print "This line does not appear to be an email subject."

Question: Write a program that takes a string as input and checks if all characters in the string are alphanumeric. Print "Alphanumeric string" or "Not an alphanumeric string."

Question: Write a program that takes a string as input and checks if all characters in the string are alphabetic. Print "Alphabetic string" or "Not an alphabetic string."

Question: Write a program that takes a string as input and checks if all characters in the string are decimal digits. Print "Decimal string" or "Not a decimal string."

Question: Write a program that takes a string as input and checks if all characters in the string are digits. Print "Digit string" or "Not a digit string."

Question: Write a program that takes a string as input and checks if all characters in the string are numeric characters. Print "Numeric string" or "Not a numeric string

Question: Write a program that takes a string as input. Check if all cased characters in the string are lowercase. If they are, print "All lowercase"; otherwise, print "Not all lowercase."

Question: Write a program that takes a string as input. Check if all cased characters in the string are uppercase. If they are, print "All uppercase"; otherwise, print "Not all uppercase."

Question: Write a program that takes a string as input. Check if the string is in title case. If it is, print "Title case string"; otherwise, print "Not a title case string."

Question: Write a program that takes a string as input. Check if all characters in the string are whitespace characters. If they are, print "Whitespace string"; otherwise, print "Not a whitespace string."


Question: Write a program that takes a number (as a string) and a desired width as input. Pad the beginning of the number with leading zeros so that it reaches the specified width. Print the zero-filled string.


Question: Write a program that takes a string and a width as input. Center the string within the specified width, using '*' as the fill character, and print the result.

Question: Write a program that takes two strings as input. Convert both strings to their casefolded forms and then check if they are equal. Print "Case-insensitive match" or "No case-insensitive¬†match."




above quesations answers?


# 1. Capitalize the first letter of the sentence
sentence = input("Enter a sentence: ")
print("Capitalized:", sentence.capitalize())

# 2. Convert entire string to lowercase
string = input("Enter a string: ")
print("Lowercase:", string.lower())

# 3. Convert entire string to uppercase
string = input("Enter a string: ")
print("Uppercase:", string.upper())

# 4. Convert to title case
sentence = input("Enter a sentence: ")
print("Title Case:", sentence.title())

# 5. Remove leading spaces
string = input("Enter a string with leading spaces: ")
print("Stripped Leading:", string.lstrip())

# 6. Remove trailing spaces
string = input("Enter a string with trailing spaces: ")
print("Stripped Trailing:", string.rstrip())

# 7. Remove both leading and trailing spaces
string = input("Enter a string with leading and trailing spaces: ")
print("Stripped Both:", string.strip())

# 8. Replace word in sentence
sentence = input("Enter a sentence: ")
old = input("Enter old word: ")
new = input("Enter new word: ")
print("Replaced Sentence:", sentence.replace(old, new))

# 9. Count character occurrences (case-insensitive)
string = input("Enter a string: ").lower()
char = input("Enter a character: ").lower()
count = 0
for c in string:
    if c == char:
        count += 1
print("Count:", count)

# 10. Find index of first occurrence of substring
string = input("Enter a string: ")
substr = input("Enter substring: ")
index = string.find(substr)
if index != -1:
    print("First occurrence at index:", index)
else:
    print("Substring not found.")

# 11. Find all occurrences of substring using while loop
string = input("Enter a string: ")
substr = input("Enter substring: ")
start = 0
while True:
    index = string.find(substr, start)
    if index == -1:
        break
    print("Found at index:", index)
    start = index + 1

# 12. Split comma-separated string
string = input("Enter comma-separated items: ")
items = string.split(',')
print("Items:")
for item in items:
    print(item.strip())

# 13. Check if filename ends with .txt
filename = input("Enter filename: ")
if filename.endswith(".txt"):
    print("This is a text file.")
else:
    print("This is not necessarily a text file.")

# 14. Check if line starts with "Subject: "
line = input("Enter a line of text: ")
if line.startswith("Subject: "):
    print("This line is likely an email subject.")
else:
    print("This line does not appear to be an email subject.")

# 15. Check if string is alphanumeric
string = input("Enter a string: ")
if string.isalnum():
    print("Alphanumeric string")
else:
    print("Not an alphanumeric string")

# 16. Check if string is alphabetic
string = input("Enter a string: ")
if string.isalpha():
    print("Alphabetic string")
else:
    print("Not an alphabetic string")

# 17. Check if string is decimal digits
string = input("Enter a string: ")
if string.isdecimal():
    print("Decimal string")
else:
    print("Not a decimal string")

# 18. Check if string is digit
string = input("Enter a string: ")
if string.isdigit():
    print("Digit string")
else:
    print("Not a digit string")

# 19. Check if string is numeric
string = input("Enter a string: ")
if string.isnumeric():
    print("Numeric string")
else:
    print("Not a numeric string")

# 20. Check if all characters are lowercase
string = input("Enter a string: ")
if string.islower():
    print("All lowercase")
else:
    print("Not all lowercase")

# 21. Check if all characters are uppercase
string = input("Enter a string: ")
if string.isupper():
    print("All uppercase")
else:
    print("Not all uppercase")

# 22. Check if string is title case
string = input("Enter a string: ")
if string.istitle():
    print("Title case string")
else:
    print("Not a title case string")

# 23. Check if all characters are whitespace
string = input("Enter a string: ")
if string.isspace():
    print("Whitespace string")
else:
    print("Not a whitespace string")

# 24. Pad number with leading zeros
number = input("Enter a number: ")
width = int(input("Enter desired width: "))
print("Zero-filled:", number.zfill(width))

# 25. Center the string with '*' fill character
string = input("Enter a string: ")
width = int(input("Enter width: "))
print("Centered string:", string.center(width, '*'))

# 26. Casefold comparison of two strings
str1 = input("Enter first string: ")
str2 = input("Enter second string: ")
if str1.casefold() == str2.casefold():
    print("Case-insensitive match")
else:
    print("No case-insensitive match")






Practice questions for today:
1. Create a list of 5 numbers. Print the first and last elements using indexing.
2. Print the list in reverse using slicing.
3. Print the elements from index 1 to 3 (inclusive).
4. Find the sum of all elements in the list using a for loop.
5. Count how many even numbers are present in the list.
6. Print only the elements at even index positions.
7. Create a list of 5 names. Print each name in uppercase using a for loop.
8. Print the length of the list using len() function.
9. Replace the 3rd element of the list with¬†a¬†new¬†value.



all above answers?

# List of 5 numbers
numbers = [10, 20, 30, 40, 50]

# 1. Print the first and last elements using indexing
print("First element:", numbers[0])
print("Last element:", numbers[-1])

# 2. Print the list in reverse using slicing
print("Reversed list:", numbers[::-1])

# 3. Print the elements from index 1 to 3 (inclusive)
print("Elements from index 1 to 3:", numbers[1:4])

# 4. Find the sum of all elements in the list using a for loop
total = 0
for num in numbers:
    total += num
print("Sum of all elements:", total)

# 5. Count how many even numbers are present in the list
even_count = 0
for num in numbers:
    if num % 2 == 0:
        even_count += 1
print("Number of even numbers:", even_count)

# 6. Print only the elements at even index positions
print("Elements at even index positions:")
for i in range(0, len(numbers), 2):
    print(numbers[i])

# 7. Create a list of 5 names. Print each name in uppercase using a for loop
names = ["ashok", "ravi", "deepa", "kiran", "sita"]
print("Names in uppercase:")
for name in names:
    print(name.upper())

# 8. Print the length of the list using len() function
print("Length of the numbers list:", len(numbers))

# 9. Replace the 3rd element of the list with a new value
numbers[2] = 99  # Replacing the element at index 2 (3rd element)
print("Updated list:", numbers)







05 -08 2025 python prctice?



Practice interview questions for today:

1.What is a list in Python? How does it differ from a tuple?
2.Explain the concept of mutability in the context of Python lists.
3.How do you access elements in a list? What is negative indexing?
4.Explain list slicing with an example. How can you reverse a list using slicing?
5.Describe the purpose and behavior of the append() and insert() list methods. What are their differences?
6.How do the remove() and pop() list methods work? What value does pop() return? What happens if you try to remove an element that doesn't exist?
7.What is the purpose of the index() and count() list methods?
8.Explain how the sort() method works. How can you sort a list in descending order? Does sort() return a new list?
9.What does the reverse() method do to a list? Does it return a new list?
10.What is a nested list in Python? How do you access elements within a nested list? Provide an example.
11.Explain list comprehension with its basic syntax. What are the advantages of using list comprehension over traditional for loops for list creation?
12.What is the purpose of the list() constructor? Give an example of how it can be used.
13.What does the del keyword do in Python when used with lists? How can you delete elements by index or slice? How can you delete the entire list?
14.What are some built-in functions that can be used with lists (e.g., len(), sum(), min(), max(), sorted())? Explain their purpose.

programming questions:

1.write a programming to Reverse a list without using the reverse() method (use slicing or a loop).
2.Remove all occurrences of a specific element from a list.
3.write a program to Find the second largest number in a list.
4. Use list comprehension to create a list of all even numbers between 1 and 20 (inclusive).
5. Given a list of numbers, use list comprehension to create a new list containing only the numbers greater than 5.
6. Given a list, remove a specific range of elements (defined by start and end indices) using the del keyword and slicing.
7. Given a list of words, use list comprehension to create a new list containing the length of each word.
8. Write a function that takes a list and a value as input and removes all occurrences of that value from the list in-place.
9. Write a program that takes a string as input, converts it into a list of characters, reverses the list, and then joins the characters back into a reversed string. Print the reversed string.
10. Write a program that takes a sentence as input. Split the sentence into a list of words. Then, iterate through the list of words and count the total number of vowels (a, e, i, o, u - case-insensitive) in all the words combined. Print the total¬†vowel¬†count.






# 1. What is a list in Python? How does it differ from a tuple?
my_list = [1, 2, 3]
my_tuple = (1, 2, 3)

# 2. Mutability in lists
my_list[0] = 10

# 3. Accessing elements and negative indexing
list = [10, 20, 30]
print(list[0])   # 10
print(list[-1])  # 30

# 4. List slicing and reversing
list = [1, 2, 3, 4, 5]
print(list[1:4])  # [2, 3, 4]
print(list[::-1]) # [5, 4, 3, 2, 1]

# 5. append() vs insert()
list.append(6)
list.insert(2, 99)

# 6. remove() and pop()
list.remove(5)
value = list.pop(2)

# 7. index() and count()
list.index(3)
list.count(3)

# 8. sort() ascending and descending
list.sort()
list.sort(reverse=True)

# 9. reverse()
list.reverse()

# 10. Nested list
nested = [[1, 2], [3, 4]]
print(nested[1][0])  # 3

# 11. List comprehension
squares = [x*x for x in range(5)]

# 12. list() constructor
list("hello")  # ['h', 'e', 'l', 'l', 'o']

# 13. del keyword with lists
del my_list[2]
del my_list[1:3]
# del my_list  # deletes entire list

# 14. Built-in list functions
len(list)
sum(list)
min(list)
max(list)
sorted(list)

# Programming Questions:

# 1. Reverse a list without using reverse()
lst = [1, 2, 3, 4]
reversed_list = lst[::-1]
print(reversed_list)

# 2. Remove all occurrences of a specific element
lst = [1, 2, 3, 2, 4, 2]
target = 2
result = [x for x in lst if x != target]
print(result)

# 3. Find the second largest number
lst = [4, 5, 6, 7, 9, 9]
unique = list(set(lst))
unique.sort()
print("Second largest:", unique[-2])

# 4. Even numbers between 1 and 20 using list comprehension
evens = [x for x in range(1, 21) if x % 2 == 0]
print(evens)

# 5. Numbers greater than 5 using list comprehension
nums = [1, 6, 3, 9, 2]
greater = [x for x in nums if x > 5]
print(greater)

# 6. Remove a range of elements using del
lst = [10, 20, 30, 40, 50, 60]
del lst[2:5]
print(lst)

# 7. Word lengths using list comprehension
words = ["apple", "banana", "kiwi"]
lengths = [len(word) for word in words]
print(lengths)

# 8. Remove all occurrences in-place
def remove_value(lst, val):
    while val in lst:
        lst.remove(val)
    return lst

print(remove_value([1, 2, 2, 3, 4], 2))

# 9. Reverse string using list conversion
s = "hello"
char_list = list(s)
char_list.reverse()
reversed_str = ''.join(char_list)
print(reversed_str)

# 10. Count vowels in a sentence
sentence = input("Enter sentence: ")
words = sentence.split()
vowels = "aeiouAEIOU"
count = sum(1 for word in words for char in word if char in vowels)
print("Total vowels:", count)







Practice questions for today:
1. What is a set in Python? How does it differ from a list and a tuple? What are its key properties?
2. What is a frozenset? How does it differ from a regular set? When might you use a frozenset?
3. Can you have mutable data types as elements of a set? Why or why not? What about frozensets?
4. Explain the purpose and usage of the split() method for strings. Provide an example.
5. Explain the purpose and usage of the join() method for strings. Provide an example.
6. What is a dictionary in Python? How does it store data? What are the key properties of a dictionary?
7. What are the requirements for keys in a Python dictionary? Why are these requirements in place? Can you use a list as a key?
8. Create two sets, set1 with elements [1, 2, 3, 4, 5] and set2 with elements [4, 5, 6, 7, 8]. Convert these lists to sets.
9. Find and print the common elements between set1 and set2 created in the previous question.
10. Write a program that takes a sentence as input, splits it into words, and then prints the unique words in the sentence.
11. You have a list of words: ["Hello", "World", "Python"]. Use the join() method to create a single string with these words separated by a hyphen "-".
12. Create a dictionary that stores the capital cities of three countries (e.g., "USA": "Washington D.C.", "France": "Paris", "Japan": "Tokyo").
13. Given the dictionary from the previous question, ask the user to enter a country and print its capital city. Handle the case where the country is not in¬†the¬†dictionary.






answers above quesations for realted?

# -----------------------------------
# Python Practice Questions - Answers
# -----------------------------------

# 1. What is a set in Python? How does it differ from a list and a tuple? What are its key properties?
#    - A set is an unordered collection of unique elements.
#    - Difference:
#         List -> Ordered, allows duplicates, mutable.
#         Tuple -> Ordered, allows duplicates, immutable.
#         Set -> Unordered, no duplicates, mutable (but elements must be immutable).
#    - Key properties: unordered, no duplicates, mutable (but only immutable elements allowed).

# Example set:
example_set = {1, 2, 3, 3, 4}
print("1) Example Set:", example_set)

# 2. What is a frozenset? How does it differ from a regular set? When might you use a frozenset?
#    - frozenset is immutable version of set. Once created, cannot add/remove elements.
#    - Use when you need a set as a dictionary key or store it inside another set.
fs = frozenset([1, 2, 3])
print("2) Frozenset Example:", fs)

# 3. Can you have mutable data types as elements of a set? Why or why not? What about frozensets?
#    - No, because set elements must be hashable (immutable).
#    - You cannot have lists/dicts as set elements, but tuples (immutable) are fine.

# 4. split() method
sentence = "Python is powerful"
words = sentence.split()  # Splits by whitespace
print("4) Split Example:", words)

# 5. join() method
joined_sentence = "-".join(words)
print("5) Join Example:", joined_sentence)

# 6. Dictionary
#    - Dictionary stores data as key-value pairs.
#    - Keys must be unique and hashable.
#    - Values can be any type.
capital_dict = {"USA": "Washington D.C.", "France": "Paris", "Japan": "Tokyo"}
print("6) Dictionary Example:", capital_dict)

# 7. Requirements for dictionary keys:
#    - Must be immutable and hashable (str, int, tuple, etc.)
#    - Cannot use list as a key (TypeError).
try:
    bad_dict = {[1, 2, 3]: "Not allowed"}
except TypeError as e:
    print("7) List as key error:", e)

# 8. Create two sets from lists
set1 = set([1, 2, 3, 4, 5])
set2 = set([4, 5, 6, 7, 8])
print("8) Set1:", set1)
print("8) Set2:", set2)

# 9. Common elements between set1 and set2
common_elements = set1 & set2
print("9) Common Elements:", common_elements)

# 10. Program to split sentence into unique words
input_sentence = "Python is fun and Python is powerful"
unique_words = set(input_sentence.split())
print("10) Unique Words:", unique_words)

# 11. Join list with hyphen
words_list = ["Hello", "World", "Python"]
hyphen_joined = "-".join(words_list)
print("11) Hyphen Joined String:", hyphen_joined)

# 12. Dictionary with capitals
capitals = {"USA": "Washington D.C.", "France": "Paris", "Japan": "Tokyo"}
print("12) Capitals Dictionary:", capitals)

# 13. User input for capital lookup
country = input("Enter a country name: ").strip()
capital = capitals.get(country, "Country not found in dictionary")
print(f"13) Capital of {country}: {capital}")






























